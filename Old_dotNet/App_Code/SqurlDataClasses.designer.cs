//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1378
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="C:\\PROJECTS\\SQURL\\APP_DATA\\SQURL.MDF")]
public partial class SqurlDataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void UpdateSqurl(Squrl instance);
  partial void DeleteSqurl(Squrl instance);
  #endregion
	
	static SqurlDataClassesDataContext()
	{
	}
	
	public SqurlDataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public SqurlDataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public SqurlDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public SqurlDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public SqurlDataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["squrlConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Squrl> Squrls
	{
		get
		{
			return this.GetTable<Squrl>();
		}
	}
	
	private void InsertSqurl(Squrl obj)
	{
		System.Nullable<int> p1 = obj.SqurlId;
		this.AddSqurl(obj.Url, ref p1);
		obj.SqurlId = p1.GetValueOrDefault();
	}
	
	[Function(Name="dbo.AddSqurl")]
	public int AddSqurl([Parameter(Name="Url", DbType="NVarChar(1000)")] string url, [Parameter(Name="SqurlId", DbType="Int")] ref System.Nullable<int> squrlId)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), url, squrlId);
		squrlId = ((System.Nullable<int>)(result.GetParameterValue(1)));
		return ((int)(result.ReturnValue));
	}
	
	[Function(Name="dbo.GetSqurl")]
	public int GetSqurl([Parameter(Name="SqurlId", DbType="Int")] System.Nullable<int> squrlId, [Parameter(Name="Url", DbType="NVarChar(1000)")] ref string url)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), squrlId, url);
		url = ((string)(result.GetParameterValue(1)));
		return ((int)(result.ReturnValue));
	}
}

[Table(Name="dbo.Squrl")]
public partial class Squrl : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SqurlId;
	
	private string _Url;
	
	private int _AccessCount;
	
	private System.DateTime _LastAccess;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate();
    partial void OnCreated();
    partial void OnSqurlIdChanging(int value);
    partial void OnSqurlIdChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnAccessCountChanging(int value);
    partial void OnAccessCountChanged();
    partial void OnLastAccessChanging(System.DateTime value);
    partial void OnLastAccessChanged();
    #endregion
	
	public Squrl()
	{
		OnCreated();
	}
	
	[Column(Storage="_SqurlId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int SqurlId
	{
		get
		{
			return this._SqurlId;
		}
		set
		{
			if ((this._SqurlId != value))
			{
				this.OnSqurlIdChanging(value);
				this.SendPropertyChanging();
				this._SqurlId = value;
				this.SendPropertyChanged("SqurlId");
				this.OnSqurlIdChanged();
			}
		}
	}
	
	[Column(Storage="_Url", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
	public string Url
	{
		get
		{
			return this._Url;
		}
		set
		{
			if ((this._Url != value))
			{
				this.OnUrlChanging(value);
				this.SendPropertyChanging();
				this._Url = value;
				this.SendPropertyChanged("Url");
				this.OnUrlChanged();
			}
		}
	}
	
	[Column(Storage="_AccessCount", DbType="Int NOT NULL")]
	public int AccessCount
	{
		get
		{
			return this._AccessCount;
		}
		set
		{
			if ((this._AccessCount != value))
			{
				this.OnAccessCountChanging(value);
				this.SendPropertyChanging();
				this._AccessCount = value;
				this.SendPropertyChanged("AccessCount");
				this.OnAccessCountChanged();
			}
		}
	}
	
	[Column(Storage="_LastAccess", DbType="SmallDateTime NOT NULL")]
	public System.DateTime LastAccess
	{
		get
		{
			return this._LastAccess;
		}
		set
		{
			if ((this._LastAccess != value))
			{
				this.OnLastAccessChanging(value);
				this.SendPropertyChanging();
				this._LastAccess = value;
				this.SendPropertyChanged("LastAccess");
				this.OnLastAccessChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
